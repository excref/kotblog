//region Common

buildscript {
    ext {
        kotlinVersion = '1.1.2-5'
        springBootVersion = '1.5.3.RELEASE'
        springManagementVersion = '1.0.2.RELEASE'
        sonarqubeVersion = '2.5'
        easymockVersion = '3.4'
        easymockclassextensionVersion = '3.2'
        commonsCollectionVersion = '4.1'
        commonsLangVersion = '3.5'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }



    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${springManagementVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}")
    }
}

allprojects {

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'eclipse'
    apply plugin: 'io.spring.dependency-management'

    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext.springBootMavenBomVersion = "org.springframework.boot:spring-boot-dependencies:1.5.3.RELEASE"

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
        compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
        compile("org.apache.commons:commons-collections4:${commonsCollectionVersion}")
        compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
    }

    dependencyManagement {
        imports {
            mavenBom ext.springBootMavenBomVersion
        }
    }
}

//endregion

//region Sonar

apply plugin: "org.sonarqube"
apply plugin: 'jacoco'

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "Kotblog"
        property "sonar.projectKey", "excref"
        property "sonar.organization", "excref"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv("SONAR_TOKEN")
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

//endregion

//region Projects

project(':blog:api:rest') {

    apply plugin: "org.springframework.boot"

    dependencies {
        compile project(':blog:api:model')
        compile project(':blog:api:facade')

        compile('org.springframework.boot:spring-boot-starter-jersey')
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-thymeleaf')
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile('org.springframework.boot:spring-boot-actuator-docs')
        compile('org.springframework.boot:spring-boot-starter-hateoas')
        runtime('org.springframework.boot:spring-boot-devtools')
    }

    bootRepackage {
        mainClass = 'com.excref.kotblog.blog.KotblogApplication'
        executable = true
    }
}

project(':blog:api:facade') {
    dependencies {
        compile project(':blog:api:model')
        compile project(':blog:service:impl')

        testCompile project(':blog:test-toolkit')
    }
}

project(':blog:api:model') {
    dependencies {
        compile "com.fasterxml.jackson.core:jackson-annotations"
    }
}

project(':blog:service:impl') {

    dependencies {
        compile project(':blog:service:core')
        compile project(':blog:persistence')

        testCompile project(':blog:test-toolkit')
    }

}

project(':blog:persistence') {

    dependencies {
        compile project(':blog:service:core')
        //	runtime('org.postgresql:postgresql')
    }

}

project(':blog:service:core') {
    dependencies {
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
    }
}

project(':blog:test-toolkit') {

    dependencies {
        compile project(':blog:service:core')
        compile project(':blog:api:model')

        compile("junit:junit")
        compile('org.springframework.boot:spring-boot-starter-test')
        compile('org.springframework.restdocs:spring-restdocs-mockmvc')
        compile("org.easymock:easymock:${easymockVersion}")
        compile("org.easymock:easymockclassextension:${easymockclassextensionVersion}")
        runtime('com.h2database:h2')
    }

}

//endregion